// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.21.5
// source: comms/comms.proto

package comms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterClient interface {
	Count(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (Counter_CountClient, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Count(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (Counter_CountClient, error) {
	stream, err := c.cc.NewStream(ctx, &Counter_ServiceDesc.Streams[0], "/comms.Counter/Count", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Counter_CountClient interface {
	Recv() (*CounterResp, error)
	grpc.ClientStream
}

type counterCountClient struct {
	grpc.ClientStream
}

func (x *counterCountClient) Recv() (*CounterResp, error) {
	m := new(CounterResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CounterServer is the server API for Counter service.
// All implementations must embed UnimplementedCounterServer
// for forward compatibility
type CounterServer interface {
	Count(*CounterReq, Counter_CountServer) error
	mustEmbedUnimplementedCounterServer()
}

// UnimplementedCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (UnimplementedCounterServer) Count(*CounterReq, Counter_CountServer) error {
	return status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCounterServer) mustEmbedUnimplementedCounterServer() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func RegisterCounterServer(s grpc.ServiceRegistrar, srv CounterServer) {
	s.RegisterService(&Counter_ServiceDesc, srv)
}

func _Counter_Count_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CounterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServer).Count(m, &counterCountServer{stream})
}

type Counter_CountServer interface {
	Send(*CounterResp) error
	grpc.ServerStream
}

type counterCountServer struct {
	grpc.ServerStream
}

func (x *counterCountServer) Send(m *CounterResp) error {
	return x.ServerStream.SendMsg(m)
}

// Counter_ServiceDesc is the grpc.ServiceDesc for Counter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Count",
			Handler:       _Counter_Count_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comms/comms.proto",
}
